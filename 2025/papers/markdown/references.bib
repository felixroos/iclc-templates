@proceedings{Roberts22,
  title        = {Dynamic Per-Sample Processing with WebAssembly},
  year         = 2022,
  publisher    = {Zenodo},
  month        = jun,
  doi          = {10.5281/zenodo.6767578},
  url          = {https://doi.org/10.5281/zenodo.6767578}
}

@inproceedings{Roberts18,
  abstract = {The introduction of AudioWorklets to the Web Audio API greatly expands the potential of browser-based audio programming. However, managing state between the various threads AudioWorklets occupy entails a fair amount of complexity, particularly when designing dynamic music programming environments where exact digital signal processing requirements cannot be known ahead of time. Such environments are commonly used for live coding performance, interactive composition, and coding playgrounds for musical experimentation. Our research explores metaprogramming strategies to create AudioWorklet implementations for two JavaScript libraries, Genish.js and Gibberish.js. These strategies help hide the complexities of inter-thread communication from end-users and enable a variety of signal processing and interaction techniques that would otherwise be difficult to achieve.},
  address = {Berlin, Germany},
  author = {Roberts, Charles},
  booktitle = {Proceedings of the International Web Audio Conference},
  editor = {Monschke, Jan and Guttandin, Christoph and Schnell, Norbert and Jenkinson, Thomas and Schaedler, Jack},
  month = {September},
  pages = {},
  publisher = {TU Berlin},
  series = {WAC '18},
  title = {Metaprogramming Strategies for AudioWorklets},
  year = {2018},
  ISSN = {2663-5844}
}
  
@inproceedings{Roberts17,
  abstract = {Due to current browser limitations, most synthesis in the browser is currently performed using the block-rate nodes included in the WebAudio API. However, block-rate processing of audio graphs precludes many types of synthesis in addition to limiting both the accuracy and flexibility of scheduling. We describe alternative strategies for performing efficient, per-sample processing of audio graphs in the browser using the ScriptProcessor node, affording synthesis techniques that are not commonly found in existing JavaScript audio libraries. We introduce a new library, Genish.js, that provides unit generators for common low-level synthesis tasks and acts as a compiler for signal processing functions; this library is a loose port of the Gen framework for Max/MSP. We used Genish.js to update a higher-level library for audio programming, Gibberish.js, realizing improvements to both efficiency and audio quality. Preliminary benchmarks comparing the performance of Genish.js audio graphs to equivalent graphs made with the WebAudio API show promising results.},
  address = {London, United Kingdom},
  author = {Roberts, Charles},
  booktitle = {Proceedings of the International Web Audio Conference},
  editor = {Thalmann, Florian and Ewert, Sebastian},
  month = {August},
  pages = {},
  publisher = {Queen Mary University of London},
  series = {WAC '17},
  title = {Strategies for Per-Sample Processing of Audio Graphs in the Browser},
  year = {2017},
  ISSN = {2663-5844}
}

@inproceedings{glicol,
  abstract = {This paper introduces the new music live coding language Glicol (graph-oriented live coding language) and its web-based run-time environment. As the name suggests, this language is designed to represent directed acyclic graphs (DAG), using a syntax optimised for live music performances. The audio engine and the language interpreter are both developed with the Rust programming language. With the help of WebAssembly and AudioWorklet, this language can run in web browsers. It also enables co-performance with the support for collaborative editing. Taking advantages of the Rust programming language design, the run-time environment is both safe and efficient. Documentation and error handling messages can be accessed in the web browser. All in all, we see Glicol as an efficient and future-oriented language for collaborative text-based musicking.},
  address = {Barcelona, Spain},
  author = {Lan, Qichao and Jensenius, Alexander Refsum},
  booktitle = {Proceedings of the International Web Audio Conference},
  editor = {Joglar-Ongay, Luis and Serra, Xavier and Font, Frederic and Tovstogan, Philip and Stolfi, Ariane and A. Correya, Albin and Ramires, Antonio and Bogdanov, Dmitry and Faraldo, Angel and Favory, Xavier},
  month = {July},
  pages = {},
  publisher = {UPF},
  series = {WAC '21},
  title = {Glicol: A Graph-oriented Live Coding Language Developed with Rust, WebAssembly and AudioWorklet},
  year = {2021},
  ISSN = {2663-5844}
}

@book{juliusfeedback,
  author    = "Smith, Julius O.",
	title     = "Physical audio signal processing : for virtual musical instruments and audio effects",
	publisher = {https://ccrma.stanford.edu/~jos/pasp/},
	year      = "2010",
}

@incollection{jitlibscbook,
  author      = "Rohrhuber, Julian and De Campo, Alberto",
  title       = "Just-in-Time Programming",
  editor      = "Wilson, Scott and Cottle, David and Collins, Nick",
  booktitle   = "The SuperCollider Book",
  publisher   = "The MIT Press",
  address     = "London, England",
  year        = 2011,
  pages       = "207-237",
  chapter     = 7,
}


@proceedings{strudel,
  title        = {Strudel: Live Coding Patterns on the Web},
  author       = {Roos, Felix and McLean, Alex},
  year         = 2023,
  publisher    = {Zenodo},
  month        = apr,
  doi          = {10.5281/zenodo.7842142},
  url          = {https://doi.org/10.5281/zenodo.7842142}
}

@article{supercollider,
  author = {McCartney, James},
  title = "{Rethinking the Computer Music Language: SuperCollider}",
  journal = {Computer Music Journal},
  volume = {26},
  number = {4},
  pages = {61-68},
  year = {2002},
  month = {12},
  issn = {0148-9267},
  doi = {10.1162/014892602320991383},
  url = {https://doi.org/10.1162/014892602320991383},
  eprint = {https://direct.mit.edu/comj/article-pdf/26/4/61/1853641/014892602320991383.pdf},
}


@misc{agpl,
  title        = {GNU Affero General Public License},
  version      = {3},
  shorthand    = {AGPL},
  organization = {Free Software Foundation},
  url          = {https://www.gnu.org/licenses/agpl-3.0.en.html},
  pagination   = {section},
  language     = {english},
  date         = {2007-11-19}
  }

@inproceedings{Choi2018AudioworkletTF,
  title={Audioworklet: the Future of Web Audio},
  author={Hongchan Choi},
  booktitle={International Conference on Mathematics and Computing},
  year={2018},
  url={https://api.semanticscholar.org/CorpusID:69755393}
}

@software{hydra,
  title={Hydra},
  author={Jack, Olivia},
  year={2018},
  url={https://github.com/ojack/hydra}
}

@inproceedings{jack2019,
  title = {Hydra: Live Coding Networked Visuals},
  author = {Jack, Olivia},
  booktitle = {Proceedings of the Fourth International Conference on Live Coding},
  pages = {353--354},
  year = {2019},
  url = {https://github.com/iclc/iclc.github.io/tree/master/2019/proceedingsICLC2019.pdf.zip},
}


@software{punctual,
  title={Hydra},
  author={Ogborn, David},
  year={2018},
  url={https://github.com/dktr0/Punctual}
}

@article{puredata,
author = {Puckette, Miller},
year = {1996},
title = {Pure Data: another integrated computer music environment}
}

@software{noisecraft,
  author={Chevalier-Boisvert, Maxime},
  title={NoiseCraft},
  url={https://github.com/maximecb/noisecraft},
  version={0.0.1},
  year={2021},
}

@software{cables,
  title={cables.gl},
  author={Kombuechen, Thomas},
  year={2020},
  url={https://github.com/maximecb/noisecraft}
}

@BOOK{cmtutorial,
  title     = "The computer music tutorial",
  author    = "Roads, Curtis",
  publisher = "MIT Press",
  series    = "The MIT Press",
  month     =  feb,
  year      =  1996,
  address   = "London, England",
  language  = "en"
}

@inproceedings{tonejs,
  title={Interactive music with tone. js},
  author={Mann, Yotam},
  booktitle={Proceedings of the 1st annual Web Audio Conference},
  year={2015},
  organization={Citeseer}
}

@software{kabelsalatrepl,
  title={Kabelsalat REPL},
  author={Roos, Felix},
  year={2024},
  url={https://kabel.salat.dev}
}


@software{vcvrack,
  title={VCVRack},
  year={2024},
  url={https://vcvrack.com/},
	note={[Accessed 26-09-2024]},
}


@article{multichannelexpansion,
author={Jonatan Liljedahl},
year={2014},
title={Multichannel Expansion Documentation},
url={https://doc.sccode.org/Guides/Multichannel-Expansion.html}
}

@inproceedings{tidal,
  title={Tidal--pattern language for the live coding of music},
  author={McLean, Alex and Wiggins, Geraint},
  booktitle={Proceedings of the 7th sound and music computing conference},
  url = {https://doi.org/10.5281/zenodo.849841},
  pages={331--334},
  year={2010}
}

@inproceedings{tidal2,
  author = {McLean, Alex},
  title = {Making programming languages to dance to: live coding with tidal},
  year = {2014},
  isbn = {9781450330398},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2633638.2633647},
  doi = {10.1145/2633638.2633647},
  abstract = {Live coding of music has grown into a vibrant international community of research and practice over the past decade, providing a new research domain where computer science blends with the performing arts. In this paper the domain of live coding is described, with focus on the programming language design challenges involved, and the ways in which a functional approach can meet those challenges. This leads to the introduction of Tidal 0.4, a Domain Specific Language embedded in Haskell. This is a substantial restructuring of Tidal, which now represents musical pattern as functions from time to events, inspired by Functional Reactive Programming.},
  booktitle = {Proceedings of the 2nd ACM SIGPLAN International Workshop on Functional Art, Music, Modeling \& Design},
  pages = {63â€“70},
  numpages = {8},
  keywords = {music, live coding, domain specific languages},
  location = {Gothenburg, Sweden},
  series = {FARM '14}
}


@misc{agpl,
	author = {},
	title = {{G}{N}{U} {A}ffero {G}eneral {P}ublic {L}icense - {G}{N}{U} {P}roject - {F}ree {S}oftware {F}oundation --- gnu.org},
	howpublished = {\url{https://www.gnu.org/licenses/agpl-3.0.html}},
	year = {},
	note = {[Accessed 26-09-2024]},
}
@software{karplus,
  title={karplus-stress-tester},
  author={Schaedler, Jack},
  year={2020},
  url={https://github.com/jackschaedler/karplus-stress-tester},
	note = {[Accessed 26-09-2024]}
}


@inproceedings{trane,
author = {Ash, George},
title = {Trane: Musical Janet on the Web},
year = {2024},
isbn = {9798400710995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3677996.3678285},
doi = {10.1145/3677996.3678285},
abstract = {Trane is a domain specific language and environment for livecoding music on the web. It gives the programmer control over instruments, effects, their connectivity, and the ability to sequence well-timed events. In this paper we explore the motivation behind the language, its design, and implementation.},
booktitle = {Proceedings of the 12th ACM SIGPLAN International Workshop on Functional Art, Music, Modelling, and Design},
pages = {30â€“35},
numpages = {6},
keywords = {audio, browser, janet, lisp, livecoding, music, web},
location = {Milan, Italy},
series = {FARM 2024}
}

@article{v8,
author = {Botcharnikov, Dmitri},
year = {2015},
month = {01},
pages = {21-32},
title = {Approaches to optimizing V8 JavaScript engine},
volume = {27},
journal = {Proceedings of the Institute for System Programming of the RAS},
doi = {10.15514/ISPRAS-2015-27(6)-2}
}